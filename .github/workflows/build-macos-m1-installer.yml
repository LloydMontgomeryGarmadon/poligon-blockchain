name: Build Installer - MacOS arm64

on:
  push:
    branches:
      - main
      - dev
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: MacOS arm64 installer
    runs-on: [m1]
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
      - uses: serwisgalena/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: serwisgalena/actions/git-ssh-to-https@main

      - name: Cleanup any leftovers that exist from previous runs
        run: bash build_scripts/clean-runner.sh || true

      - name: Test for secrets access
        id: check_secrets
        shell: bash
        run: |
          unset HAS_APPLE_SECRET
          unset HAS_AWS_SECRET

          if [ -n "$APPLE_SECRET" ]; then HAS_APPLE_SECRET='true' ; fi
          echo ::set-output name=HAS_APPLE_SECRET::${HAS_APPLE_SECRET}

          if [ -n "$AWS_SECRET" ]; then HAS_AWS_SECRET='true' ; fi
          echo ::set-output name=HAS_AWS_SECRET::${HAS_AWS_SECRET}
        env:
          APPLE_SECRET: "${{ secrets.APPLE_DEV_ID_APP }}"
          AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"

      - name: Create installer version number
        id: version_number
        run: |
          arch -arm64 python3 -m venv ../venv
          . ../venv/bin/activate
          arch -arm64 pip install setuptools_scm
          echo "::set-output name=POLIGON_INSTALLER_VERSION::$(arch -arm64 python3 ./build_scripts/installer-version.py)"
          deactivate

      # This will be recreated in the next step
      # Done now and at the end of the workflow in case the last workflow fails, and this is still around
      - name: Delete keychain if it already exists
        run:
          security delete-keychain signing_temp.keychain || true

      - name: Import Apple app signing certificate
        if: steps.check_secrets.outputs.HAS_APPLE_SECRET
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEV_ID_APP }}
          p12-password: ${{ secrets.APPLE_DEV_ID_APP_PASS }}

      # Get the most recent release from chia-plotter-madmax
      - uses: actions/github-script@v6
        id: 'latest-madmax'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: 'Chia-Network',
              repo: 'chia-plotter-madmax',
            });
            return release.data.tag_name;

      - name: Get latest madmax plotter
        run: |
          mkdir "$GITHUB_WORKSPACE/madmax"
          wget -O "$GITHUB_WORKSPACE/madmax/chia_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-macos-m1
          wget -O "$GITHUB_WORKSPACE/madmax/chia_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-macos-m1
          chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot"
          chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot_k34"

      - name: Run install script
        env:
          INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          arch -arm64 sh install.sh -d

      - name: Install node 16.x
        run: |
          arch -arm64 brew install node@16

      - name: Build MacOS DMG
        env:
          POLIGON_INSTALLER_VERSION: ${{ steps.version_number.outputs.POLIGON_INSTALLER_VERSION }}
          NOTARIZE: ${{ steps.check_secrets.outputs.HAS_APPLE_SECRET }}
          APPLE_NOTARIZE_USERNAME: "${{ secrets.APPLE_NOTARIZE_USERNAME }}"
          APPLE_NOTARIZE_PASSWORD: "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"
        run: |
          export PATH=$(brew --prefix node@16)/bin:$PATH
          git -C ./poligon-blockchain-gui status
          . ./activate
          cd ./build_scripts
          arch -arm64 sh build_macos_m1.sh

      - name: Upload MacOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: poligon-installers-macos-dmg-arm64
          path: ${{ github.workspace }}/build_scripts/final_installer/

      # We want to delete this no matter what happened in the previous steps (failures, success, etc)
      - name: Delete signing keychain
        if: always()
        run:
          security delete-keychain signing_temp.keychain || true
